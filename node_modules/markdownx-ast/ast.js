module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	// Abstract Sytnax Tree for Markdown Document
	"use strict";

	exports.NodeTypes = {
	    document: "document",
	    heading: "heading",
	    section: "section",
	    list: "list",
	    list_item: "list-item",
	    paragraph: "paragraph",
	    code: "code",
	    html: "html",
	    jsx: "jsx",
	    i18n: "i18n",
	    blockquote: "blockquote",
	    newline: "newline"
	};
	function isContentNode(o) {
	    return o.children != null;
	}
	exports.isContentNode = isContentNode;
	function isIdNode(o) {
	    return o.id != null;
	}
	exports.isIdNode = isIdNode;
	function isTextNode(o) {
	    return o.text != null;
	}
	exports.isTextNode = isTextNode;
	;
	function isHeading(o) {
	    return o.type === exports.NodeTypes.heading;
	}
	exports.isHeading = isHeading;
	function isListItem(o) {
	    return o.type == exports.NodeTypes.list_item;
	}
	exports.isListItem = isListItem;
	function isList(o) {
	    return o.type == exports.NodeTypes.list;
	}
	exports.isList = isList;

/***/ }
/******/ ]);